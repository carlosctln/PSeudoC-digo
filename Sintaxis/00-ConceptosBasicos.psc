// ¿Qué es programación? 																	                               
// La programación desde el punto de vista informático consiste en crear una serie de instrucciones o algoritmos, bien     
// definidos y claros los cuales ayudan a resolver un problema espcifico, estos algoritmos están escritos en algún lenguaje
// de programción o en Pseudocódigo.                                                                                       

// También podriamos definir a la programación como la acción de ordenar, estructurar o componer una serie de instrucciones
// cronológicas para cumplir un objetivo determinado.                                                                       

// Al conjunto de instrucciones que conforman un programa en informática se les denominan "ALGORITMOS", se dice que un 
// programa bien estructurado está compuesto por uno o varios algoritmos bien dedinidos y claros.

// Hay varios tipos de programación, cada problema a resolver lleva un tipo de lógica diferente para su resolución, en 
// programación a estos distintos tipos de lógica o formas de resolver un problema se les llama paradigma de programación.
	
// Tipos o paradigmas de programación:

// Programación esructurada:
// Este paradigna busca mejorar y reducir el tiempo del proceso al utilizar subrutinas (subalgoritmos dentro del algoritmo
// principal que resuelve una tarea).

// La programación estructurada, también consiste en dividir un problema muy grande, en varios problemas los cuales tienen 
// una complejidad menor al problema original.

// Programación modular: 
// Divide los programas en módulos para trabajar con ellos y resolver los problemas de una manera más simple.

// Programación orientada a objetos: 
// Utiliza objetos (entes con características, estado y comportamiento) como elementos fundamentales para la búsqueda de 
// soluciones.

// Elementos de la programación:
// Existen ciertos elementos que son clave a la hora de conocer o ejecutar un lenguaje de programación, entre los más 
// representativos están:

// Palabras reservadas. Palabras que dentro del lenguaje significan la ejecución de una instrucción determinada, por lo que 
// no pueden ser utilizadas con otro fin más que indicarle al lenguje las instrucciones que debe seguir o ejecutar.

// Operadores: Símbolos que indican la aplicación de operaciones lógicas o matemáticas.
// Variables: Son espacios en la memoria RAM las cuales contienen datos que pueden variar durante la ejecución del programa.
// Constantes: Datos que no varían durante la ejecución del programa.
// Identificadores: Nombre que se le da a las diferentes variables para identificarlas.

// ¿Qué es un algoritmo? 
// Un algoritmo es una secuencia bien definida, finita y ordenada de pasos para poder lograr un objetivo o dar solución a 
// un problema dado, un algoritmo tiene tres caracteristicas pricipales las cuales son: 

// 1) Debe ser preciso y ordenado: Se debe indicar el orden en el que se deben realizar los pasos.
// 2) Debe estar bien definido: No deben contener ambigüedades, además si se ejecuta dos o más veces el mismo algoritmo 
// debemos tener el mismo resultado.
// 3) Debe ser finito: Esto quiere decir que en algún momento debe terminar, también se debe indicar donde inicia y donde 
// finaliza.

// Un algoritmo también tiene eficiencia y eficacia.
// # Eficacia: se dice que un algoritmo es eficaz si llega a la solución deseada.
// # Eficiencia: Se dice que un algoritmo es eficiente si llega a la solucion deseada y además lo hace utilizando la menor
// cantidad de recursos y la menor cantidad de tiempo, es decir la solución más rápida.
// Todo algoritmo eficiente es eficaz, pero no todo algoritmo eficaz es eficiente.

// Descripción de un algoritmo: La descripcón de un algotimo se hace mediante tres niveles:
// 1) Descripción de alto nivel: En este nivel se establece el problema, también se selecciona un modelo matemático y se da 
//    una explicación de manera verbal.
// 2) Descripción formal: En este nivel se hace uso del Pseudocógigo para describir la secuencia de pasos que llevan a la 
//    solución esperada.
// 3) Implementación: Se muestra el algoritmo expresado en un lenguaje de programación específico.

// Representación de un algoritmo: un algoritmo se puede representar de varias formas diferentes pero aca solo mencionaré 
// tres.
// 1) Usando un diagrama de flujo.
// 2) Usando Pseudocódigo.
// 3) Usando un lenguaje de programación formal.

// ¿Qué es un diagrama de flujo?
// Es la forma gráfica de un algoritmo, para realizar un diagrama de flujo se utilizan una serie de símbolos conectados por
// flechas para indicar la secuencia del algoritmo.
// (¯_¯_¯) El símbolo que tiene forma de una elipse se utiliza para indicar el inicio y el final del diagrama.
// ----->  La línea de flujo sirve para indicar el orden de ejecución de las intrucciones.
// /¯_¯_¯/ El trapecio indica las salidas y entradas de información o texto.
//  El rectángulo sirve para realizar los procesos
// < > el rombo nos permite analizar una situación, con base en valores de verdad.

// ¿Qué es pseudocódigo? 

// Un Pseudocódigo es una serie de instrucciones muy parecidas a un lenguje de programación con la diferencia que al       
// escribir en Pseudocódigo no hay reglas establecidas, lo cual hace que el pseudocódigo tenga caracteristicas muy 
// parecidas al lenguaje natural.

// ¿Qué es un lenguaje de programación? 
// Es un idioma artificial prediseñado formado por signos, palabras y símbolos que permiten la comunicación entre el 
// programador y el ordenador.
// Cada lenguaje de programación posee sus propias reglas de escritura a además los leguajes tienen una filosofía a la cuál 
// se le llama paradigma de programción.
// En programación hay un problema y este es que la computadora no entiende las instrucciones que le damos por medio de un 
// lenguaje formal de programación.

// ¿Que lenguaje entienden las computadoras? 
// Las computadoras entienden únicamente el código o lenguaje máquina que esta compuesto por el código binario, es decir, 
// 0s y 1s. Para traducir nuestros algoritmos escritos en lenguajes de alto nivel a lenguaje máquina tenemos dos opciones:

// 1) Compiladores: Un compilador traduce todo el código fuente una única vez y genera un archivo compilado, llamado código 
// objeto ejemplo archivo.exe, 
// los lenguajes de programación que usan este tipo de traductor se les llaman lenguajes compilados.

// 2) Intérpretes: Un interpréte traduce directamente el código fuente cada vez que se ejecuta el programa. Los intérpretes 
// no generan un archivo ejecutable, sino que leen línea por línea cada vez que se ejecuta el programa, a los programas que 
// usan este tipo de traductor se le llaman lenguajes interpretados.

// Cabe mencionar que existen lenguajes que son compilados e interpretados al mismo tiempo, un ejemplo de estos es el 
// lenguajes Java.

// Existen dos tipos de lenguajes porgramación claramente definidos: Los lenguajes de bajo nivel y los leguajes de alto 
// nivel.
	
// Lenguajes de bajo nivel:
// Son lenguajes que en su totalidad dependen de la máquina, es decir que el programa que se realiza con este tipo de 
// lenguaje no se pueden migrar o utilizar en otras máquinas. Al estar prácticamente diseñados a medida del hardware, 
// aprovechan al máximo las características del mismo. Entre los lenguajes de bajo nivel se encuentran:
	
// Lenguaje máquina:
// Este lenguaje ordena a la máquina las operaciones fundamentales para su funcionamiento. Consiste en la combinación de 
// 0's y 1's para formar las ordenes entendibles por el hardware de la máquina.

// Lenguaje ensamblador:
// Es un derivado del lenguje máquina y esta formado por abreviaturas de letras y números llamados nemotécnico.
	
// Lenguajes de alto nivel:

// Son aquellos que se encuentran más cercanos al lenguaje natural que al lenguaje máquina, comúnmente estos lenguajes usan 
// palabras y abreviaturas del idioma inglés.
	
// Leguajes de "Medio Nivel":

// Este es un término no aceptado por todos. estos lenguajes se encuetran en un punto medio entre los dos anteriores. 
// Dentro de estos lenguaje se podría situarse el lenguaje C ya que puede acceder a los registros del sistema, trabajar con 
// direcciones de memoria, puede realizar operaciones de bajo nivel y a la vez realiza operaciones de alto nivel.

// Para tener un orden, limpieza y legibilidad del código se deben respertar una serie de regla o estándares de 
// programación:

// Criterios de un buen estándar de programación:
// Factor nemotécnico: Se usa para que el programador pueda recordar con facilidad el nombre de una variable fácilmente.
// Factor sugestivo: Para que los progamadores puedan leer y entender rápidamente, código escrito por otros programadores.

// Indentado del código, esta técnica de programación consiste en dejar una cierta cantidad de espacio respecto al margen 
// derecho el cual puede ser de dos o cuatro espacios o bien podemos utilizar la tecla tabulador esto con el fin de tener 
// un código organizado y fácil de leer.

// También podemos mencionar que para tener una mejor organización y mayor profecionalidad en nuestro código hay buenas 
// practicas de programación algunas son:
// Priorizar la legibilidad, esto hara que nuestro código sea comprencible para otros programadores y para nosotros mismos.
// Estructura la arquitectura, antes de escribir código se debe pensar en la utilidad del código, en cómo funciona, cómo se
// modula y con qué servicios es compatible. 
// Plantea qué estructura tendrá, de qué forma lo testearás y cómo sera actualizado.

// Leer mucho código fuente: esto es importante para enteder el conocimiento ajeno, lo cual nos dara nuevas y mejores ideas 
// para mejorar tanto en lógica como en escritura de nuestro propio código.

// Colocar comentarios: es muy util para ahorar tiempo de lectura y comprención del código.
// Testea tu código: esto se hace con el fin de obtimizar y mejorar el código, así como en la identificación de errores.
// Evita los caracteres unicos del español: un código debe ser lo más universal posible, para esto se deben evitar en nombres 
// de variables caracteres como la tilde o la "ñ".    

// Todos los lenguajes tienen una series de palabras propias del lenguajes a las que se les llaman palabras reservadas, al 
// lenguaje que es lo que debe hacer, por lo tanto no se puden utilizar para definir variable, nombrar métodos o funciones.
	
// En programación uno de los conceptos muy basicos que debemos aprender es el uso de variables. 
// Hay lenguajes denominados tipados estaticos, en estos lenguajes se debe especificar el tipo de dato a utilizar.

// ¿Qué es un tipo de dato? 
// Un tipo de dato se refiere al tipo de información que podrá almacenar una variable hay dos tipos de datos los cuales son: 
// primitivos y no primitivos.	

// Tipos de datos primitivos: Son los tipos de datos que usan los programadores cuando crean variable en su programa los 
// tipos de datos primitivos son:
// boolean, char, byte, short, int, long, float, y double (Tipos de datos de Java).

// Tipos de datos no primitivos: aca podemos mecionar a los tipos que poseen métodos o pueden almacenar una gran catidad de
// información, lo tipos de datos no primitivos son:
// String o también llamados cadenasd de texto.

// Los tipos de datos tienen un limite respecto a la cantidad de memoria que puden utilizar la siguiente tabla da una 
// pequeña descripción de las caracteristicas de los tipos de datos.

// ############################################################################################################################################################################
// #         Tipo                            Valor                    Tamaño (en bits)                   valor mínimo                  valor máximo         valor por defecto #
// #       boolean                       true - false                         08                              N.A                           N.A                    False      #
// #   char (Character)                Carácter Unicode                       16                           \u0000                        \uFFFF                   \u0000      #
// # byte (Binary Digit)               Entero con signo                       08                             -128                           128                      0        #
// #        short                      Entero con signo                       16                           -32768                         32767                      0        #
// #    int (Integer)                  Entero con signo                       32                        -2147483648                    2147483647                    0        #
// #        long                       Entero con signo                       64                    -9223372036854775808           9223372036854775807               0        #
// #        float            Coma flotante de presición IEEE 754              32                      ±3.40282347E+38                ±1.40239846E-45                 0.0      #
// #        double           Coma flotante de presición IEEE 754              64                 ±1.79769313486231570E+308      ±4.94065645841246544E-324            0.0      #
// ############################################################################################################################################################################

// En programción existen opredores aritméticos los cuales nos ayudan a realizar operaciones matemáticas:
// Operadores 
// (+)  suma 
// (-) resta 
// (/) división 
// (*) multiplicación 
// (%) módulo  
// (&) potencia, (Solo unos pocos lenguajes tienen un operador para las potencias).
	
// También hay operadores relacionales los cuales son:
// Los operadores relacionales nos ayudan a comparar o relacionar dos o más condiciones, y así obtener un valor de verdad.

// ####################################
// # Operador            Nombre       #
// ####################################
// #    <              Menor que      #
// #    >              Mayor que      #  
// #    ==             Igualdad       # 
// #    <=         Menor o igual que  #  
// #    >=         Mayor o igual que  #
// #  !=, < >         Diferente de    #
// #    ||                 or         #
// #    &&                and         #
// #    ~                 not         # 
// ####################################

// Los operadores relacionales and y or estan sujetos a las tablas lógicas de verdad.
// Para el operador and: el resultado es verdadero si ambas condiciones son verdaderas.
// Para el operador or: el resultado es verdadero si una de las condiciones son verdaderas
// El operador not: Invierte la condición de la expresión.

// ¿Qué es una variable? 
// Una variable es un contenedor lógico de información, también podemos decir que una variable es un espacio en memoria, 
// especificamente en la memoria RAM, una definición más informal seria que una variable es una caja donde guardamos cosas 
// que en programación llamaremos información o datos.

// Existen reglas para nombrar variables las cuales son: una variable no puede comenzar con números o caracteres especiales 
// deben comenzar extrictamente con letras.
// Hay estandares de nomenclatura para las variables llamados: Snake Case, Kebab Case, Camel Case, Upper Case, entre otros.

// Nomenclaturas para nombrar variables.

// Upper Case: Todas las letras del identificador se escriben en mayusculas ejemplo: EJEMPLODENOMENCLATURA.

// Camel case: El nombre viene porque se asemeja a las jorobas de un camello y se puede dividir en dos tipos que son: 
// Upper Camel Case: Cuando la primera letra de cada palabra es mayúscula. También llamado Pascal case ejemplo: 
 // EjemploDeNomenclatura.
// Lower Camel Case: a diferencia del anterior es cuando la primera letra es minúcula ejemplo: ejemploDeNomenclatura.

// Snake Case: Es cuando las palabras se separan con un guión bajo (_), al igual que el Camel Case existen variedades como 
// todas las letras en mayúculas llamado SCREAMING_SNAKE_CASE ejemplo:ejemplo_de_nomenclatura,Otro_Ejemplo_De_nomenclatura.

// Kebab Case: Es igual que el Snake Case, con la diferencia que utiliza el guión medio (-) para separar las variables 
// ejemplo: ejemplo-de-nomenclatura 
// Train Case: Es una variedad del Kebab Case, pero cada palabra con la primera letra en mayúcula ejemplo: 
// Ejemplo-De-Nomenclatura.

// l33t ó leet ó 1337: tambien conocido como eleet o leetspeak, es una nomenclatura usada por algunas comunidades y 
// usuarios de diferentes medios de internet. Utiliza algunos caracteres para reemplazar a otros en formas que juegan en la 
// similitud a través de la reflexión u otra semejanza ejemplo: 3jemp10D3N0m3nc1474r4, n00b, C@7L0vr.

// Notación Hungara: consiste en añadir prefijos en minúsculas que se añaden a los nombres de las variables y que indican 
// su tipo, altamente usado en lenguajes no tipados. El resto del nombre indica, lo más claramente posible, la función que 
// realiza la variable ejemplo: nContador, bActivado.
